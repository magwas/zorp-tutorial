diff --git a/debian/control b/debian/control
index c9dde19..d53516d 100644
--- a/debian/control
+++ b/debian/control
@@ -3,7 +3,7 @@ Section: net
 Priority: optional
 Maintainer: SZALAY Attila <sasa@debian.org>
 Standards-Version: 3.5.6
-Build-Depends: python-dev (>= 2.3), libssl-dev (>= 0.9.7), libglib2.0-dev (>= 2.2.1), libzorpll-dev (>= 3.1.8.0.3), debhelper, libcap-dev
+Build-Depends: python2.4-dev, libssl-dev (>= 0.9.7), libglib2.0-dev (>= 2.2.1), libzorpll-dev (>= 3.1.8.0.3), debhelper, libcap-dev
 
 Package: zorp
 Section: net
@@ -30,7 +30,7 @@ Description: An advanced protocol analyzing firewall
 Package: zorp-dev
 Section: devel
 Architecture: any
-Depends: python-dev (>= 1.5.2), zorp (= ${Source-Version}), libzorpll-dev
+Depends: python2.4-dev (>= 1.5.2), zorp (= ${Source-Version}), libzorpll-dev
 Description: Development files needed to compile Zorp modules.
  Zorp is a new generation firewall. It is essentially a transparent proxy
  firewall, with strict protocol analyzing proxies, a modular architecture,
diff --git a/debian/zorp-modules.files b/debian/zorp-modules.files
index e69de29..2d8e0c6 100644
--- a/debian/zorp-modules.files
+++ b/debian/zorp-modules.files
@@ -0,0 +1,17 @@
+usr/lib/zorp/libanypy.*
+usr/share/zorp/pylib/Zorp/AnyPy.py
+usr/lib/zorp/libfinger.*
+usr/share/zorp/pylib/Zorp/Finger.py
+usr/lib/zorp/libftp.*
+usr/share/zorp/pylib/Zorp/Ftp.py
+usr/lib/zorp/libhttp.*
+usr/share/zorp/pylib/Zorp/Http.py
+usr/share/zorp/http/*
+usr/lib/zorp/libplug.*
+usr/share/zorp/pylib/Zorp/Plug.py
+usr/lib/zorp/libpssl.*
+usr/share/zorp/pylib/Zorp/Pssl.py
+usr/lib/zorp/libwhois*
+usr/share/zorp/pylib/Zorp/Whois.py
+usr/lib/zorp/libtelnet*
+usr/share/zorp/pylib/Zorp/Telnet.py
diff --git a/lib/pystream.c b/lib/pystream.c
index c806b1f..22c70e4 100644
--- a/lib/pystream.c
+++ b/lib/pystream.c
@@ -48,6 +48,7 @@ static gint z_policy_stream_setattr(PyObject *o, char *name,
 static PyObject *z_policy_stream_repr(PyObject *o);
 static PyObject *z_policy_stream_read(PyObject *o, PyObject *args);
 static PyObject *z_policy_stream_write(PyObject *o, PyObject *args);
+static PyObject *z_policy_stream_write_chunk(PyObject *o, PyObject *args);
 static PyObject *z_policy_stream_close(PyObject *o, PyObject *args);
 static PyObject *z_policy_stream_readline(PyObject *o, PyObject *args);
 
@@ -63,6 +64,7 @@ static PyMethodDef py_zorp_stream_methods[] =
 {
   { "read",        z_policy_stream_read, METH_VARARGS, NULL },
   { "write",       z_policy_stream_write, METH_VARARGS, NULL },
+  { "write_chunk",       z_policy_stream_write_chunk, METH_VARARGS, NULL },
   { "close",       (PyCFunction) z_policy_stream_close, 0, NULL },
   { "readline",        z_policy_stream_readline, METH_VARARGS, NULL },
   { NULL,          NULL, 0, NULL }   /* sentinel*/
@@ -250,6 +252,12 @@ z_policy_stream_getattr(PyObject *o, char *name)
       z_stream_ctrl(self->stream, ZST_LINE_GET_RETURN_EOL,  &value, sizeof(gboolean));
       return Py_BuildValue("i", !!value);
     }
+  else if (strcmp(name, "nonblock") == 0)
+    {
+      gboolean value;
+      z_stream_ctrl(self->stream, ZST_CTRL_GET_NONBLOCK,  &value, sizeof(gboolean));
+      return Py_BuildValue("i", !!value);
+    }
 
   return Py_FindMethod(py_zorp_stream_methods, o, name);
 }
@@ -373,6 +381,17 @@ z_policy_stream_setattr(PyObject *o, char *name,
       z_stream_ctrl(self->stream, ZST_LINE_SET_RETURN_EOL,  &cval, sizeof(int));
       return 0;
     }
+  else if (strcmp(name, "nonblock") == 0)
+    {
+      int cval;
+      if (!PyArg_Parse(value, "i", &cval))
+	{
+	  PyErr_SetString(PyExc_TypeError, "nonblock is boolean");
+	  return 1;
+	}
+      z_stream_ctrl(self->stream, ZST_CTRL_SET_NONBLOCK,  &cval, sizeof(int));
+      return 0;
+    }
 
   PyErr_SetString(PyExc_AttributeError, "No such attribute");
   return 1;
@@ -501,6 +520,43 @@ z_policy_stream_write(PyObject *o, PyObject *args)
   return Py_None;
 }
 
+/**
+ * z_policy_stream_write_chunk:
+ * @o: Python self, ZPolicyStream object
+ * @args: Python args argument
+ *
+ * read method exported to Python with this declaration: 
+ *   def read(buf):
+ *
+ * the buf argument is a Python string which contains the byte sequence to
+ * be written.
+ **/
+static PyObject *
+z_policy_stream_write_chunk(PyObject *o, PyObject *args)
+{
+  ZPolicyStream *self = (ZPolicyStream *) o;
+  gchar *buf; 
+  guint length;
+  gsize bytes_written;
+  gint res;
+  
+  if (!PyArg_ParseTuple(args, "s#", &buf, &length))
+    return NULL;
+    
+  Py_BEGIN_ALLOW_THREADS
+  res = z_stream_write_chunk(self->stream, buf, length, &bytes_written, NULL);
+  Py_END_ALLOW_THREADS
+  
+  if (res != G_IO_STATUS_NORMAL)
+    {
+      PyErr_SetString(PyExc_IOError, "I/O error writing stream.");
+      return NULL;
+    }
+  
+  Py_XINCREF(Py_None);
+  return Py_None;
+}
+
 
 /**
  * z_policy_stream_close:
@@ -519,6 +575,17 @@ z_policy_stream_close(PyObject *o, PyObject *args G_GNUC_UNUSED)
   return Py_None;
 }
 
+static PyObject* z_policy_G_IO_IN ;
+static PyObject* z_policy_G_IO_OUT ;
+static PyObject* z_policy_G_IO_STATUS_ERROR ;
+static PyObject* z_policy_G_IO_STATUS_NORMAL ;
+static PyObject* z_policy_G_IO_STATUS_EOF ;
+static PyObject* z_policy_G_IO_STATUS_AGAIN ;
+static PyObject* z_policy_ZRL_EOL_NL ;
+static PyObject* z_policy_ZRL_EOL_CRLF ;
+static PyObject* z_policy_ZRL_EOL_NUL ;
+static PyObject* z_policy_ZRL_EOL_FATAL ;
+
 /**
  * z_policy_stream_init:
  * 
@@ -536,4 +603,16 @@ z_policy_stream_module_init(void)
   z_policy_stream_exception = PyErr_NewException("Zorp.Stream.StreamException", NULL, NULL);
   Py_INCREF(z_policy_stream_exception);
   PyModule_AddObject(module, "StreamException", z_policy_stream_exception);
+
+  //it was faster to generate some code than think about a nice macro
+	z_policy_G_IO_IN	= Py_BuildValue("i", G_IO_IN);	Py_INCREF(z_policy_G_IO_IN);	PyModule_AddObject(module, "G_IO_IN", z_policy_G_IO_IN);
+	z_policy_G_IO_OUT	= Py_BuildValue("i", G_IO_OUT);	Py_INCREF(z_policy_G_IO_OUT);	PyModule_AddObject(module, "G_IO_OUT", z_policy_G_IO_OUT);
+	z_policy_G_IO_STATUS_ERROR	= Py_BuildValue("i", G_IO_STATUS_ERROR);	Py_INCREF(z_policy_G_IO_STATUS_ERROR);	PyModule_AddObject(module, "G_IO_STATUS_ERROR", z_policy_G_IO_STATUS_ERROR);
+	z_policy_G_IO_STATUS_NORMAL	= Py_BuildValue("i", G_IO_STATUS_NORMAL);	Py_INCREF(z_policy_G_IO_STATUS_NORMAL);	PyModule_AddObject(module, "G_IO_STATUS_NORMAL", z_policy_G_IO_STATUS_NORMAL);
+	z_policy_G_IO_STATUS_EOF	= Py_BuildValue("i", G_IO_STATUS_EOF);	Py_INCREF(z_policy_G_IO_STATUS_EOF);	PyModule_AddObject(module, "G_IO_STATUS_EOF", z_policy_G_IO_STATUS_EOF);
+	z_policy_G_IO_STATUS_AGAIN	= Py_BuildValue("i", G_IO_STATUS_AGAIN);	Py_INCREF(z_policy_G_IO_STATUS_AGAIN);	PyModule_AddObject(module, "G_IO_STATUS_AGAIN", z_policy_G_IO_STATUS_AGAIN);
+	z_policy_ZRL_EOL_NL	= Py_BuildValue("i", ZRL_EOL_NL);	Py_INCREF(z_policy_ZRL_EOL_NL);	PyModule_AddObject(module, "ZRL_EOL_NL", z_policy_ZRL_EOL_NL);
+	z_policy_ZRL_EOL_CRLF	= Py_BuildValue("i", ZRL_EOL_CRLF);	Py_INCREF(z_policy_ZRL_EOL_CRLF);	PyModule_AddObject(module, "ZRL_EOL_CRLF", z_policy_ZRL_EOL_CRLF);
+	z_policy_ZRL_EOL_NUL	= Py_BuildValue("i", ZRL_EOL_NUL);	Py_INCREF(z_policy_ZRL_EOL_NUL);	PyModule_AddObject(module, "ZRL_EOL_NUL", z_policy_ZRL_EOL_NUL);
+	z_policy_ZRL_EOL_FATAL	= Py_BuildValue("i", ZRL_EOL_FATAL);	Py_INCREF(z_policy_ZRL_EOL_FATAL);	PyModule_AddObject(module, "ZRL_EOL_FATAL", z_policy_ZRL_EOL_FATAL);
 }
diff --git a/modules/anypy/anypy.c b/modules/anypy/anypy.c
index a71835f..43880de 100644
--- a/modules/anypy/anypy.c
+++ b/modules/anypy/anypy.c
@@ -50,6 +50,7 @@ typedef struct _AnyPyProxy
   guint max_line_length[EP_MAX];
   ZPoll *poll;
   gboolean quit;
+  gboolean linebased;
 } AnyPyProxy;
 
 extern ZClass AnyPyProxy__class;
@@ -70,14 +71,17 @@ anypy_stream_init(AnyPyProxy *self)
   if (!self->super.endpoints[EP_CLIENT] || !self->super.endpoints[EP_SERVER])
     {
       z_proxy_log(self, ANYPY_ERROR, 2, "Server side not yet connected, unable to init streams;");
-      z_proxy_leave(self);
-      return FALSE;
+      z_proxy_return(self,FALSE);
     }
-  self->super.endpoints[EP_CLIENT] = z_stream_push(self->super.endpoints[EP_CLIENT], z_stream_line_new(NULL, self->max_line_length[EP_CLIENT], ZRL_EOL_CRLF|ZRL_EOL_FATAL|ZRL_RETURN_EOL));
-  self->super.endpoints[EP_SERVER] = z_stream_push(self->super.endpoints[EP_SERVER], z_stream_line_new(NULL, self->max_line_length[EP_SERVER], ZRL_EOL_CRLF|ZRL_EOL_FATAL|ZRL_RETURN_EOL));
-
-  z_proxy_leave(self);
-  return TRUE;
+  z_proxy_log(self, ANYPY_DEBUG, 2, "linebased= %u;",self->linebased);
+  if (self->linebased)
+   {
+      z_proxy_log(self, ANYPY_ERROR, 2, "stacking in streamline;");
+	  self->super.endpoints[EP_CLIENT] = z_stream_push(self->super.endpoints[EP_CLIENT], z_stream_line_new(NULL, self->max_line_length[EP_CLIENT], ZRL_EOL_CRLF|ZRL_EOL_FATAL|ZRL_RETURN_EOL));
+	  self->super.endpoints[EP_SERVER] = z_stream_push(self->super.endpoints[EP_SERVER], z_stream_line_new(NULL, self->max_line_length[EP_SERVER], ZRL_EOL_CRLF|ZRL_EOL_FATAL|ZRL_RETURN_EOL));
+   }
+
+  z_proxy_return(self,TRUE);
 }
 
 /*
@@ -88,7 +92,6 @@ typedef struct _ZPolicyStreamCBData {
        AnyPyProxy *self;
        ZPolicyStream *stream;
        PyObject *obj;
-       gchar *session_id;
 } ZPolicyStreamCBData;
 
 /*
@@ -107,12 +110,22 @@ anypy_callback(ZStream *stream, GIOCondition  cond G_GNUC_UNUSED, gpointer  user
   guint resno;
   ZPolicyStreamCBData *cbdata = (ZPolicyStreamCBData *) user_data;
 
-  z_proxy_log(cbdata->self, ANYPY_DEBUG, 2, "anypy_callback, %s;",cbdata->session_id);
-  res=z_policy_call_object(
-       cbdata->callback,
-       //z_policy_var_build("(OOO)",cbdata->self,cbdata->stream,cbdata->obj),
-       z_policy_var_build("(OO)",cbdata->stream,cbdata->obj),
-       cbdata->session_id);
+  z_proxy_log(cbdata->self, ANYPY_DEBUG, 2, "anypy_callback, %s;",cbdata->self->super.session_id);
+  {
+  ZPolicyObj *callback;
+  ZPolicyObj *args;
+  callback=cbdata->callback;
+  z_proxy_log(cbdata->self, ANYPY_DEBUG, 2, "callback=%p;",callback);
+  args = z_policy_var_build("(OO)",cbdata->stream,cbdata->obj);
+  z_proxy_log(cbdata->self, ANYPY_DEBUG, 2, "args=%p;",args);
+  z_policy_lock(cbdata->self->super.thread);  
+  res=z_policy_call_object(callback,args,"ooo");
+  z_policy_unlock(cbdata->self->super.thread);  
+//       cbdata->callback,
+//       z_policy_var_build("(OO)",cbdata->stream,cbdata->obj),"oooo");
+//       cbdata->self->super.session_id);
+  }
+ z_proxy_log(cbdata->self, ANYPY_DEBUG, 2, "res=%p;",res);
  if (NULL == res)
  {
    cbdata->self->quit=1;
@@ -133,12 +146,28 @@ anypy_callback(ZStream *stream, GIOCondition  cond G_GNUC_UNUSED, gpointer  user
 }
 
 /**
+ * anypy_cbdata_unref:
+ * @cbdata: ZPolicyStreamCBData instance
+ *
+ * This function frees cbdata and decrements the reference counts.
+ **/
+static void
+anypy_cbdata_unref(ZPolicyStreamCBData *cbdata)
+{
+  z_proxy_log(cbdata->self, ANYPY_ERROR, 2, "cbdata_unref");
+  Py_XDECREF(cbdata->callback);
+  Py_XDECREF(cbdata->obj);
+  Py_XDECREF((ZPolicyObj *)cbdata->self);
+  g_free(cbdata);
+}
+
+/**
  * anypy_register_callback:
  * @self: AnyPyProxy instance
  * @args: Python args argument
  * 
  * registers callback for a stream
- * args is (flags,callback,stream,obj,session_id)
+ * args is (flags,callback,stream,obj)
  **/
 
 static ZPolicyObj *
@@ -148,29 +177,24 @@ anypy_register_callback(AnyPyProxy *self, ZPolicyObj *args)
   ZPolicyStream *stream;
 
   z_proxy_enter(self);
-  //FIXME extract session_id from self
   //FIXME register all needed callbacks for a stream once
-  //FIXME leaking
   ZPolicyStreamCBData *cbdata = g_new0(ZPolicyStreamCBData,1);
-  if (!z_policy_var_parse_tuple(args, "iOOOs", &flags, &(cbdata->callback), &stream, &(cbdata->obj), &(cbdata->session_id)))
+  if (!z_policy_var_parse_tuple(args, "iOOO", &flags, &(cbdata->callback), &stream, &(cbdata->obj)))
     {
-      PyErr_SetString(PyExc_AttributeError, "Arguments should be (flags,callback,stream,obj,session_id)");
-      z_proxy_leave(self);
-      return NULL;
+      PyErr_SetString(PyExc_AttributeError, "Arguments should be (flags,callback,stream,obj)");
+      z_proxy_return(self,NULL);
     }
   cbdata->self=self;
-  cbdata->stream=stream;
+  cbdata->stream=stream;//FIXME: we can get rid of it
 
-  //FIXME decref em
   Py_XINCREF(cbdata->callback);
   Py_XINCREF(cbdata->obj);
-  Py_XINCREF((ZPolicyObj *)cbdata->stream);
+  //Py_XINCREF(cbdata->stream);
   Py_XINCREF((ZPolicyObj *)cbdata->self);
-  Py_XINCREF(stream);
 
   Py_BEGIN_ALLOW_THREADS
   z_stream_set_nonblock(stream->stream, TRUE);
-  z_stream_set_callback(stream->stream,flags,anypy_callback,cbdata,NULL);
+  z_stream_set_callback(stream->stream,flags,anypy_callback,(GDestroyNotify) cbdata,(GDestroyNotify) anypy_cbdata_unref);
   z_stream_set_cond(stream->stream, flags, TRUE);
   stream->stream->timeout = -2;
   z_proxy_log(self, ANYPY_DEBUG, 2, "adding stream %p to poll %p, flags=%u;",stream->stream,self->poll,flags);
@@ -178,7 +202,39 @@ anypy_register_callback(AnyPyProxy *self, ZPolicyObj *args)
   Py_END_ALLOW_THREADS
 
   Py_XINCREF(Py_None);
-  return Py_None;
+  z_proxy_return(self,Py_None);
+}
+
+/**
+ * anypy_add_to_poll:
+ * @self: AnyPyProxy instance
+ * @args: Python args argument
+ * 
+ * add a stream to the poll
+ * args is (stream,flags)
+ **/
+
+static ZPolicyObj *
+anypy_add_to_poll(AnyPyProxy *self, ZPolicyObj *args)
+{
+  ZPolicyStream *stream;
+  int flags;
+
+  z_proxy_enter(self);
+  if (!z_policy_var_parse_tuple(args, "Oi", &stream,&flags))
+    {
+      PyErr_SetString(PyExc_AttributeError, "Arguments should be (stream)");
+      z_proxy_return(self,NULL);
+    }
+  Py_XINCREF(stream);
+  Py_BEGIN_ALLOW_THREADS
+  z_proxy_log(self, ANYPY_DEBUG, 2, "adding stream %p to poll %p;",stream->stream,self->poll);
+  z_stream_set_cond(stream->stream, flags, TRUE);
+  z_poll_add_stream(self->poll, stream->stream);
+  Py_END_ALLOW_THREADS
+
+  Py_XINCREF(Py_None);
+  z_proxy_return(self,Py_None);
 }
 
 /**
@@ -193,6 +249,7 @@ static ZPolicyObj *
 anypy_poll_iter_timeout(AnyPyProxy * self, ZPolicyObj *args) 
 {
   guint timeout;
+  guint res;
 
   z_proxy_enter(self);
 
@@ -203,19 +260,23 @@ anypy_poll_iter_timeout(AnyPyProxy * self, ZPolicyObj *args)
   if (!z_policy_var_parse_tuple(args, "i", &timeout))
     {
       z_policy_raise_exception_obj(z_policy_exc_value_error, "Invalid arguments.");
-      z_proxy_leave(self);
-      return NULL;
+      z_proxy_return(self,NULL);
     }
-  //FIXME: reference count
   z_proxy_log(self, ANYPY_DEBUG, 2, "calling z_poll_iter_timeout;");
-  if(z_poll_iter_timeout(self->poll,timeout))
+  Py_BEGIN_ALLOW_THREADS
+  res=z_poll_iter_timeout(self->poll,timeout);
+  Py_END_ALLOW_THREADS
+  if(res)
     {
+      ZPolicyObj *ret;
       z_proxy_log(self, ANYPY_DEBUG, 2, "z_poll_iter_timeout returned true;");
-      return z_policy_var_build("i",1);
+      ret=z_policy_var_build("i",1);
+      z_proxy_return(self,ret);
     }
 err:
   z_proxy_log(self, ANYPY_DEBUG, 2, "z_poll_iter_timeout returned false;");
-  return Py_None;
+  Py_XINCREF(Py_None);
+  z_proxy_return(self,Py_None);
 }
 
 /**
@@ -238,8 +299,7 @@ anypy_set_verdict(AnyPyProxy * self, ZPolicyObj *args)
   if (!z_policy_var_parse_tuple(args, "is", &verdict, &description))
     {
       z_policy_raise_exception_obj(z_policy_exc_value_error, "Invalid arguments.");
-      z_proxy_leave(self);
-      return NULL;
+      z_proxy_return(self,NULL);
     }
   if (self->super.parent_proxy)
     {
@@ -253,8 +313,7 @@ anypy_set_verdict(AnyPyProxy * self, ZPolicyObj *args)
     }
   z_policy_var_ref(z_policy_none);
   res = z_policy_none;
-  z_proxy_leave(self);
-  return res;
+  z_proxy_return(self,res);
 }
 
 /**
@@ -271,6 +330,7 @@ anypy_config_set_defaults(AnyPyProxy *self)
 
   self->max_line_length[EP_CLIENT] = 4096;
   self->max_line_length[EP_SERVER] = 4096;
+  self->linebased = 1;
 
   z_proxy_leave(self);
 }
@@ -294,6 +354,10 @@ anypy_register_vars(AnyPyProxy *self)
   z_proxy_var_new(&self->super, "register_callback",
 	Z_VAR_TYPE_METHOD | Z_VAR_GET,
 	self,anypy_register_callback);
+  /* method for adding a stream to the poll */
+  z_proxy_var_new(&self->super, "add_to_poll",
+	Z_VAR_TYPE_METHOD | Z_VAR_GET,
+	self,anypy_add_to_poll);
   /* method for iterating through poll */
   z_proxy_var_new(&self->super, "poll_iter_timeout",
 	Z_VAR_TYPE_METHOD | Z_VAR_GET,
@@ -306,6 +370,10 @@ anypy_register_vars(AnyPyProxy *self)
   z_proxy_var_new(&self->super, "server_max_line_length",
 	Z_VAR_TYPE_INT | Z_VAR_GET | Z_VAR_SET_CONFIG | Z_VAR_GET_CONFIG,
 	&self->max_line_length[EP_SERVER]);
+  /* is the proxy line-based (streams are streamlines)? */
+  z_proxy_var_new(&self->super, "linebased",
+	Z_VAR_TYPE_INT | Z_VAR_GET | Z_VAR_SET_CONFIG | Z_VAR_GET_CONFIG,
+	&self->linebased);
   z_proxy_leave(self);
 }
 
@@ -331,6 +399,24 @@ anypy_config(ZProxy *s)
   return FALSE;
 }
 
+static gboolean
+anypy_startup(ZProxy * s)
+{
+  AnyPyProxy *self = Z_CAST(s, AnyPyProxy);
+
+  z_proxy_enter(self);
+  self->quit = 0;
+  if (!z_proxy_connect_server(&self->super, NULL, 0) || !anypy_stream_init(self))
+    {
+      z_proxy_return(self,FALSE);
+    }
+  if (Z_SUPER(s,ZProxy)->startup(s))
+    {
+      z_proxy_return(self,TRUE);
+    }
+  z_proxy_return(self,FALSE);
+}
+
 static void
 anypy_main(ZProxy * s)
 {
@@ -340,11 +426,6 @@ anypy_main(ZProxy * s)
 
   z_proxy_enter(self);
   self->quit = 0;
-  if (!z_proxy_connect_server(&self->super, NULL, 0) || !anypy_stream_init(self))
-    {
-      z_proxy_leave(self);
-      return;
-    }
   z_policy_lock(self->super.thread);  
   res = z_policy_call(self->super.handler, "proxyThread", NULL, &called, self->super.session_id);
   z_policy_var_unref(res);
@@ -377,7 +458,7 @@ ZProxyFuncs anypy_proxy_funcs =
     NULL
   },
   anypy_config,
-  NULL,
+  anypy_startup,
   anypy_main,
   NULL,
   NULL,
diff --git a/pylib/Zorp/Stream.py b/pylib/Zorp/Stream.py
index 5ac92cf..db4b354 100644
--- a/pylib/Zorp/Stream.py
+++ b/pylib/Zorp/Stream.py
@@ -33,15 +33,18 @@
 </module>
 """
 
-G_IO_STATUS_ERROR = 0
-G_IO_STATUS_NORMAL = 1
-G_IO_STATUS_EOF = 2
-G_IO_STATUS_AGAIN = 3
+#FIXME: document and yank 'em
+#G_IO_IN
+#G_IO_OUT
+#G_IO_STATUS_ERROR = 0
+#G_IO_STATUS_NORMAL = 1
+#G_IO_STATUS_EOF = 2
+#G_IO_STATUS_AGAIN = 3
 
-ZRL_EOL_NL              =	0x00000001 # end-of-line is indicated by nl 
-ZRL_EOL_CRLF            =	0x00000002 # end-of-line is indicated by crlf pair 
-ZRL_EOL_NUL             =	0x00000004
-ZRL_EOL_FATAL           =	0x00000008 # erroneous eol mark is fatal 
+#ZRL_EOL_NL              =	0x00000001 # end-of-line is indicated by nl 
+#ZRL_EOL_CRLF            =	0x00000002 # end-of-line is indicated by crlf pair 
+#ZRL_EOL_NUL             =	0x00000004
+#ZRL_EOL_FATAL           =	0x00000008 # erroneous eol mark is fatal 
 
 class Stream:
 	"""
diff --git a/zorpconfig.h b/zorpconfig.h
index 14e08ea..4ae017c 100644
--- a/zorpconfig.h
+++ b/zorpconfig.h
@@ -5,7 +5,7 @@
 #define ENABLE_CONNTRACK 1
 
 /* Enable debugging */
-#define ENABLE_DEBUG 1
+#define ENABLE_DEBUG 0
 
 /* Enable ipf based tproxy */
 #define ENABLE_IPFILTER_TPROXY 0
@@ -128,7 +128,7 @@
 #define PACKAGE_VERSION ""
 
 /* The size of `void *', as computed by sizeof. */
-#define SIZEOF_VOID_P 8
+#define SIZEOF_VOID_P 4
 
 /* Define to 1 if you have the ANSI C header files. */
 #define STDC_HEADERS 1
@@ -137,19 +137,19 @@
 #define VERSION "3.1.14"
 
 /* Configuration date */
-#define ZORP_CONFIG_DATE "2008/05/29"
+#define ZORP_CONFIG_DATE "2008/08/16"
 
 /* datadir */
-#define ZORP_DATADIR "/home/bazsi/zwa/install/zorp-3.1/share/zorp"
+#define ZORP_DATADIR "/usr/share/zorp"
 
 /* libdir */
-#define ZORP_LIBDIR "/home/bazsi/zwa/install/zorp-3.1/lib/zorp"
+#define ZORP_LIBDIR "/usr/lib/zorp"
 
 /* Required license version */
 #define ZORP_LICENSE_VERSION "3.1"
 
 /* pidfiledir */
-#define ZORP_PIDFILEDIR "/home/bazsi/zwa/install/zorp-3.1/var/run/zorp/"
+#define ZORP_PIDFILEDIR "/var/run/zorp/"
 
 /* Required product name in license */
 #define ZORP_PRODUCT_NAME "Zorp Professional"
@@ -158,7 +158,7 @@
 #define ZORP_SOURCE_REVISION "devel@balabit.hu--zorp-1/zorp-core--mainline--3.1--patch-703"
 
 /* localstatedir */
-#define ZORP_STATEDIR "/home/bazsi/zwa/install/zorp-3.1/var"
+#define ZORP_STATEDIR "/var/lib/zorp"
 
 /* sysconfdir */
-#define ZORP_SYSCONFDIR "/home/bazsi/zwa/install/zorp-3.1/etc/zorp"
+#define ZORP_SYSCONFDIR "/etc/zorp"
